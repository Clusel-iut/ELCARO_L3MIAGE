/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Grammaire)
package recherche;

public class Grammaire
{
  public static void main(String args []) throws ParseException
  {
    Grammaire parser = new Grammaire(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        switch (Grammaire.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Grammaire.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Grammaire)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN [IGNORE_CASE]:
{
  <CTCMD :("CREATE TABLE") > //CTCMD pour Create Table Commande
  | <SCMD :("SELECT") >
  | <UCMD :("UPDATE") >
  | <DCMD :("DELETE") >
  | <SELECTION :(["a"-"z"])+ > //à voir pour inclure les possibles méthodes?
  | <FROM :("FROM") >
  | <TNAME :(["a"-"z"])>
  | <WHERE : ("WHERE") >
  | <OBRA : "(" >
  | <CBRA : ")" >
}

SPECIAL_TOKEN : {<COMMENT:("#")+(<TNAME>)+("#")+>}

void Start (): { }
{
  <CTCMD><TNAME><OBRA><CBRA><EOF>
  | <SCMD><SELECTION><FROM ><TNAME ><EOF >
  | < UCMD ><SELECTION ><FROM ><TNAME ><EOF >
  | < DCMD ><SELECTION ><FROM ><TNAME ><EOF >
}

int one_line() :
{}
{
  sum() ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < CONSTANT >
  < OBRA > sum() < CBRA >
}
