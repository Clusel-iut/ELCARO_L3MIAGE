/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

/* CREATE TABLE personne(Varchar nom, Varchar prenom, Integer age);
	INSERT INTO personne ('gourat', 'sebastien', 22), ('clusel', 'mathieu', 20), ('monbeig', 'jonathan', 20);
	SELECT nom FROM personne;
	SELECT nom FROM personne WHERE nom = 'gourat';
	SELECT prenom FROM personne WHERE nom = 'clusel';
	SELECT prenom FROM personne WHERE age = 22;
	SELECT prenom FROM personne WHERE age > 20;
	SELECT prenom FROM personne WHERE age < 21;
	SELECT prenom FROM personne WHERE age < 21 AND nom = 'gourat';
	SELECT prenom FROM personne WHERE age < 23 AND nom = 'gourat';
	SELECT prenom FROM personne WHERE age > 19 AND age < 21;
	SELECT prenom, age FROM personne WHERE age > 19 AND age < 21 AND nom = 'clusel';
*/
options
{
  static = true;
}

PARSER_BEGIN(Expression)
package recherche;
import stockage.*;
import stockage.memory.*;
import stockage.type.*;
import java.util.ArrayList;


abstract class Requete
{
  	public static BD bdd = new BD(new ArrayList<Relation>());
	public abstract String toString();
}

class Proj extends Requete
{

    private Projection projection;

	public Proj(ArrayList<Attribut> attributs, String from) {
		Schema sch = new Schema(attributs);
		Relation rel = null;
		rel = Requete.bdd.getRelations().get(Requete.bdd.getIndexRelation(from));
		this.projection = new Projection(rel, sch);
	}

	public Proj(ArrayList<Attribut> attributs, Relation rel) {
		Schema sch = new Schema(attributs);
		this.projection = new Projection(rel, sch);
	}

	public Projection getProjection()
	{
		return this.projection;
	}

	public String toString() {
	  return projection.toString();
	}
}

class Create extends Requete
{
  	MemoryDonneesRelation rel;
	public Create(String nom, ArrayList<Attribut> attributs) {
	  rel = new MemoryDonneesRelation(nom, new Schema(attributs));
		Requete.bdd.addRelations(rel);
	}

	public String toString() {
	  return rel.toString();
	}

}

class Insert extends Requete
{
  	MemoryDonneesRelation rel;
	public Insert(String from, ArrayList<ArrayList<Object>> values) {
	    int indexRel = Requete.bdd.getIndexRelation(from);
	    this.rel = (MemoryDonneesRelation)Requete.bdd.getRelations().get(indexRel);
		for(int j = 0; j < values.size(); j++)
		{
			rel.addTuple(new Tuple(values.get(j)));
		}
	}

	public String toString() {
	  	return rel.toString();
	}
}



public class Expression
{
  public static void main(String args []) throws ParseException
  {
    Expression parser = new Expression(System.in);
    
    /*Schema sc = new Schema(new Attribut(new TypeVarchar(),"nom"),new Attribut(new TypeVarchar(),"prenom"));

    MemoryDonneesRelation r = new MemoryDonneesRelation("RELATION",sc);
	r.addTuple(new Tuple(new StringBuff("MORAT"),new StringBuff("PHILIPPE")));
	r.addTuple(new Tuple(new StringBuff("PIGNARD"),new StringBuff("FLORIAN")));
	r.addTuple(new Tuple(new StringBuff("MONBEIG"),new StringBuff("JONATHAN")));
	r.addTuple(new Tuple(new StringBuff("CLUSEL"),new StringBuff("MATHIEU")));*/
	
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression :");
      try
      {
        switch (Expression.one_line())
        {
          case 0 :
          System.out.println("\nOK.");
          break;
          
          case 1 : 
          System.out.println("\nGoodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("\nNOK.");
        System.out.println(e.getMessage());
        e.printStackTrace();
        Expression.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("\nOops.");
        System.out.println(e.getMessage());
        break;
      }

    }
  }
}

PARSER_END(Expression)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "'" 
}

TOKEN : /* OPERATORS */
{
 < OPERATOR : (< PLUS >|< MINUS >|< EQUAL >|< INF >|< SUP >) >
| < #EQUAL : "=" >
| < #PLUS : "+" >
| < #MINUS : "-" >
| < #INF : "<" >
| < #SUP : ">" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN :
{
 < CONSTINT : (< DIGIT >)+ >
| < CONSTCHAR : (< CHAR >)+ >
| < CONSTBOOL : (< TRUE >|< FALSE >) >
| < CONSTDOUBLE : (< DOUBLEE >)+ >
| < #TRUE : "true" >
| < #FALSE : "false" >
| < #DOUBLEE : (< CONSTINT >(","(< CONSTINT >))) >
| < #DIGIT : [ "0"-"9" ] >
| < #CHAR : [ "a"-"z" ] >
| < #CHARMAJ : ["A"-"Z"] >
}

TOKEN :
{
  < CREATE : "CREATE TABLE" > //CTCMD pour Create Table Commande
| < INSERT : "INSERT INTO" >
| < VALUES : "VALUES" >
| < SELECT : "SELECT" >
| < UPDATE : "UPDATE" >
| < DELETE : "DELETE" >
| < FROM : "FROM" >
| < WHERE : "WHERE" >
| < AND : "AND" >
| < OR : "OR" >
| < GROUPBY : "GROUP BY" >
| < HAVING : "HAVING" >
| < OBRA : 	"(" >
| < CBRA : ")" >
| < COMA : "," >
| < VARCHAR : "Varchar" >
| < INT : "Integer" >
| < BOOL : "Boolean" >
| < DOUBLE : "Double" >


}

int one_line() :
{}
{
  start() ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void start() :
{Token t;
Requete r;}
{
	(
	      t = < SELECT > r = projection()
	    | t = < CREATE > r = creation()
	    | t = < INSERT > r = insertion()
    )
    {System.out.print(r.toString());} 
  
}

Proj selection(ArrayList<Attribut> attributs, String from):
{
Token t;
Relation r = Requete.bdd.getRelations().get(Requete.bdd.getIndexRelation(from));
String attr = "";
Object value = new Object();
String operateur = "";
}
{
  (
    (
      
       t = < CONSTCHAR > { attr = t.image; }
      | t = < OPERATOR > { operateur = t.image;
      					value = nextConstGlobal();
      					try {
      						r = new Selection(r, Predicat.createPredicat(r.getSchema().getIndex(attr), value, operateur));
						} catch (Exception e)
						{
							e.printStackTrace();
						}
      					 }
      | t = < AND > { r = ANDSelection(attributs, r); }
    )
   )*
     {
       return new Proj(attributs, r);
       }
}
Selection ANDSelection(ArrayList<Attribut> attributs, Relation rel):
{
Token t;
Selection r = null;
String attr = "";
Object value = new Object();
String operateur = "";
}
{
  (
    (
      
       t = < CONSTCHAR > { attr = t.image; }
      | t = < OPERATOR > { operateur = t.image;
      					value = nextConstGlobal();
      					try {
      						r = new Selection(rel, Predicat.createPredicat(rel.getSchema().getIndex(attr), value, operateur));
						} catch (Exception e)
						{
							e.printStackTrace();
						}
      			 }
      | t = < AND > { r = ANDSelection(attributs, r); }
    )
   )*
     { return  r; }
}
Insert insertion():
{
  Token t;
  String name;
  ArrayList<ArrayList<Object>> values = new ArrayList<ArrayList<Object>>();
}
{
	name = nextConstChar()
	(
	  (
	    t = < VALUES >
	  | t = < OBRA > { values.add(ligneValeur()); }
	  | t = < CBRA > { }
	  | t = < COMA > { }
	  )
	)*
	{ return new Insert(name, values); }
	  
}

ArrayList<Object> ligneValeur():
{
  Token t;
  	ArrayList<Object> lineValues = new ArrayList<Object>();
}
{
  { lineValues.add(valeur()); }
	(
	  (
	    t = < COMA > { lineValues.add(valeur()); }
	  )
	)*
	{ return lineValues; }
	   
}

Object valeur():
{
  Token t;
  	Object value = new Object();
}
{
	(
	  (
	    t = < CONSTCHAR > { value = t.image; }
	  | t = < CONSTINT > { value = Integer.parseInt(t.image); }
	  | t = < CONSTBOOL > { value = Boolean.parseBoolean(t.image); }
	  | t = < CONSTDOUBLE > { value = Double.parseDouble(t.image); }
	  )
	)
	{
  		return value;
	}
}

Create creation():
{
  Token t;
  String name;
  ArrayList<Attribut> attributs = new ArrayList<Attribut>();
}
{
	name = nextConstChar()
	(
	  (
	    t = < OBRA >
	  | t = < VARCHAR > { attributs.add(new Attribut(new TypeVarchar(), nextConstChar())); }
	  | t = < INT > {attributs.add(new Attribut(new TypeInteger(), nextConstChar())); }
	  | t = < BOOL > {attributs.add(new Attribut(new TypeBoolean(), nextConstChar())); }
	  | t = < DOUBLE > {attributs.add(new Attribut(new TypeDouble(), nextConstChar())); }
	  | t = < COMA > { }
	  | t = < CBRA > { }
	  )
	)*
	{ return new Create(name, attributs); }
	  
}
Proj projection() : 
{
  	String from = "";
	ArrayList<Attribut> attributs = new ArrayList<Attribut>();
	Token t;
	Proj p = null;
}
{
 	(
 	  (
 	    t = < CONSTCHAR > {attributs.add(new Attribut(new TypeVarchar(), t.image));}
 	  | t = < COMA > {}
 	  | t = < FROM > { from=nextConstChar(); }
 	  | t = < WHERE > { return selection(attributs, from); }
 	  )
 	)*
 	{ return new Proj(attributs, from); }	
}

String nextConstChar():
{ Token t; }
{ t = < CONSTCHAR >
	{ return t.image; }
}

Object nextConstGlobal():
{ Token t;
  Object value = new Object(); }
{
  (
       t = < CONSTCHAR > { value = t.image; }
	  | t = < CONSTINT > { value = Integer.parseInt(t.image); }
	  | t = < CONSTBOOL > { value = Boolean.parseBoolean(t.image); }
	  | t = < CONSTDOUBLE > { value = Double.parseDouble(t.image); }
  )
	{ return value; }
}