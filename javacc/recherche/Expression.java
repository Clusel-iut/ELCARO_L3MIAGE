/* Generated By:JavaCC: Do not edit this line. Expression.java */
package recherche;
import stockage.*;
import stockage.memory.*;
import stockage.type.*;
import java.util.ArrayList;


abstract class Requete
{
        public static BD bdd = new BD(new ArrayList<Relation>());
        public abstract String toString();
}

class Proj extends Requete
{

    private Projection projection;

        public Proj(ArrayList<Attribut> attributs, String from) {
                Schema sch = new Schema(attributs);
                Relation rel = null;
                rel = Requete.bdd.getRelations().get(Requete.bdd.getIndexRelation(from));
                this.projection = new Projection(rel, sch);
        }

        public Proj(ArrayList<Attribut> attributs, Relation rel) {
                Schema sch = new Schema(attributs);
                this.projection = new Projection(rel, sch);
        }

        public Projection getProjection()
        {
                return this.projection;
        }

        public String toString() {
          return projection.toString();
        }
}

class Create extends Requete
{
        MemoryDonneesRelation rel;
        public Create(String nom, ArrayList<Attribut> attributs) {
          rel = new MemoryDonneesRelation(nom, new Schema(attributs));
                Requete.bdd.addRelations(rel);
        }

        public String toString() {
          return rel.toString();
        }

}

class Insert extends Requete
{
        MemoryDonneesRelation rel;
        public Insert(String from, ArrayList<ArrayList<Object>> values) {
            int indexRel = Requete.bdd.getIndexRelation(from);
            this.rel = (MemoryDonneesRelation)Requete.bdd.getRelations().get(indexRel);
                for(int j = 0; j < values.size(); j++)
                {
                        rel.addTuple(new Tuple(values.get(j)));
                }
        }

        public String toString() {
                return rel.toString();
        }
}



public class Expression implements ExpressionConstants {
  public static void main(String args []) throws ParseException
  {
    Expression parser = new Expression(System.in);

    /*Schema sc = new Schema(new Attribut(new TypeVarchar(),"nom"),new Attribut(new TypeVarchar(),"prenom"));

    MemoryDonneesRelation r = new MemoryDonneesRelation("RELATION",sc);
	r.addTuple(new Tuple(new StringBuff("MORAT"),new StringBuff("PHILIPPE")));
	r.addTuple(new Tuple(new StringBuff("PIGNARD"),new StringBuff("FLORIAN")));
	r.addTuple(new Tuple(new StringBuff("MONBEIG"),new StringBuff("JONATHAN")));
	r.addTuple(new Tuple(new StringBuff("CLUSEL"),new StringBuff("MATHIEU")));*/

    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression :");
      try
      {
        switch (Expression.one_line())
        {
          case 0 :
          System.out.println("\u005cnOK.");
          break;

          case 1 :
          System.out.println("\u005cnGoodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("\u005cnNOK.");
        System.out.println(e.getMessage());
        e.printStackTrace();
        Expression.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("\u005cnOops.");
        System.out.println(e.getMessage());
        break;
      }

    }
  }

  static final public int one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
    case INSERT:
    case SELECT:
      start();
      jj_consume_token(43);
    {if (true) return 0;}
      break;
    case 43:
      jj_consume_token(43);
    {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void start() throws ParseException {
 Token t;
Requete r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      t = jj_consume_token(SELECT);
      r = projection();
      break;
    case CREATE:
      t = jj_consume_token(CREATE);
      r = creation();
      break;
    case INSERT:
      t = jj_consume_token(INSERT);
      r = insertion();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     System.out.print(r.toString());
  }

  static final public Proj selection(ArrayList<Attribut> attributs, String from) throws ParseException {
Token t;
Relation r = Requete.bdd.getRelations().get(Requete.bdd.getIndexRelation(from));
Proj p = null;
String attr = "";
Object value = new Object();
String operateur = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR:
      case CONSTCHAR:
      case AND:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTCHAR:
        t = jj_consume_token(CONSTCHAR);
                           attr = t.image;
        break;
      case OPERATOR:
        t = jj_consume_token(OPERATOR);
                           operateur = t.image;
                                        value = nextConstGlobal();
                                        try {
                                                r = new Selection(r, Predicat.createPredicat(r.getSchema().getIndex(attr), value, operateur));
                                                } catch (Exception e)
                                                {
                                                        e.printStackTrace();
                                                }
        break;
      case AND:
        t = jj_consume_token(AND);
                      selection(attributs, from);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                try {
                  p = new Proj(attributs, r);
                } catch (Exception e)
                {
                        e.printStackTrace();
                }
       {if (true) return  p;}
    throw new Error("Missing return statement in function");
  }

  static final public Insert insertion() throws ParseException {
  Token t;
  String name;
  ArrayList<ArrayList<Object>> values = new ArrayList<ArrayList<Object>>();
    name = nextConstChar();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
      case OBRA:
      case CBRA:
      case COMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
        t = jj_consume_token(VALUES);
        break;
      case OBRA:
        t = jj_consume_token(OBRA);
                           values.add(ligneValeur());
        break;
      case CBRA:
        t = jj_consume_token(CBRA);

        break;
      case COMA:
        t = jj_consume_token(COMA);

        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return new Insert(name, values);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Object> ligneValeur() throws ParseException {
  Token t;
        ArrayList<Object> lineValues = new ArrayList<Object>();
    lineValues.add(valeur());
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(COMA);
                           lineValues.add(valeur());
    }
          {if (true) return lineValues;}
    throw new Error("Missing return statement in function");
  }

  static final public Object valeur() throws ParseException {
  Token t;
        Object value = new Object();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTCHAR:
      t = jj_consume_token(CONSTCHAR);
                                value = t.image;
      break;
    case CONSTINT:
      t = jj_consume_token(CONSTINT);
                               value = Integer.parseInt(t.image);
      break;
    case CONSTBOOL:
      t = jj_consume_token(CONSTBOOL);
                                value = Boolean.parseBoolean(t.image);
      break;
    case CONSTDOUBLE:
      t = jj_consume_token(CONSTDOUBLE);
                                  value = Double.parseDouble(t.image);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  static final public Create creation() throws ParseException {
  Token t;
  String name;
  ArrayList<Attribut> attributs = new ArrayList<Attribut>();
    name = nextConstChar();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRA:
      case CBRA:
      case COMA:
      case VARCHAR:
      case INT:
      case BOOL:
      case DOUBLE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRA:
        t = jj_consume_token(OBRA);
        break;
      case VARCHAR:
        t = jj_consume_token(VARCHAR);
                              attributs.add(new Attribut(new TypeVarchar(), nextConstChar()));
        break;
      case INT:
        t = jj_consume_token(INT);
                         attributs.add(new Attribut(new TypeInteger(), nextConstChar()));
        break;
      case BOOL:
        t = jj_consume_token(BOOL);
                          attributs.add(new Attribut(new TypeBoolean(), nextConstChar()));
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                            attributs.add(new Attribut(new TypeDouble(), nextConstChar()));
        break;
      case COMA:
        t = jj_consume_token(COMA);

        break;
      case CBRA:
        t = jj_consume_token(CBRA);

        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return new Create(name, attributs);}
    throw new Error("Missing return statement in function");
  }

  static final public Proj projection() throws ParseException {
        String from = "";
        ArrayList<Attribut> attributs = new ArrayList<Attribut>();
        Token t;
        Proj p = null;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTCHAR:
      case FROM:
      case WHERE:
      case COMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTCHAR:
        t = jj_consume_token(CONSTCHAR);
                               attributs.add(new Attribut(new TypeVarchar(), t.image));
        break;
      case COMA:
        t = jj_consume_token(COMA);

        break;
      case FROM:
        t = jj_consume_token(FROM);
                           from=nextConstChar();
        break;
      case WHERE:
        t = jj_consume_token(WHERE);
                            {if (true) return selection(attributs, from);}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return new Proj(attributs, from);}
    throw new Error("Missing return statement in function");
  }

  static final public String nextConstChar() throws ParseException {
  Token t;
    t = jj_consume_token(CONSTCHAR);
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public Object nextConstGlobal() throws ParseException {
  Token t;
  Object value = new Object();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTCHAR:
      t = jj_consume_token(CONSTCHAR);
                           value = t.image;
      break;
    case CONSTINT:
      t = jj_consume_token(CONSTINT);
                               value = Integer.parseInt(t.image);
      break;
    case CONSTBOOL:
      t = jj_consume_token(CONSTBOOL);
                                value = Boolean.parseBoolean(t.image);
      break;
    case CONSTDOUBLE:
      t = jj_consume_token(CONSTDOUBLE);
                                  value = Double.parseDouble(t.image);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ExpressionTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xb000000,0xb000000,0x8040,0x8040,0x4000000,0x4000000,0x0,0x3c000,0x0,0x0,0xc0008000,0xc0008000,0x3c000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x0,0x1,0x1,0x70,0x70,0x40,0x0,0x7f0,0x7f0,0x40,0x40,0x0,};
   }

  /** Constructor with InputStream. */
  public Expression(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Expression(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Expression(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Expression(ExpressionTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpressionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
